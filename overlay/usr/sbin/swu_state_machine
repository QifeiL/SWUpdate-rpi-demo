#!/bin/sh
SCRIPTS_PATH="/opt/scripts"

R="2"

wait_update () {
  fw_setenv test_validity "true"
  fw_setenv retry_count "$R"
  UPDATE_STATE="WAIT"
  mount $CURRENT_APP_PART /APP  
}

decrement_variable () {
  new_value=$(fw_printenv $1 | cut -d= -f2)
  let new_value--
  fw_setenv $1 $new_value 
  echo $new_value
}

retry_update () {
  retry_count_val=$(decrement_variable "retry_count")
  if [ "$retry_count_val" -gt 0 ]
  then
    source "$SCRIPTS_PATH/lauch_update.sh" $ROOTFS_UPDATE_NAME
  else
    source "$SCRIPTS_PATH/change_application_part"
    "$SCRIPTS_PATH/invalidate_update.sh" $ROOTFS_UPDATE_NAME
    "$SCRIPTS_PATH/invalidate_update.sh" $APPLI_UPDATE_NAME
    wait_update
  fi
}

check_value () {
  val_count=$(fw_printenv $1 | cut -d= -f2)
  if [ "$val_count" -gt "0" ]; then wait_update ; else retry_update ; fi
}

write_version () {

if [ $1 = "appli" ]
then 
  new_version=$(cat $APPLI_UPDATE_NAME | cut -d_ -f3)
  version=$(cat "$CURRENT_VERSIONS_FILE/versions" | sed -n 2p | cut -d' ' -f2)
  sed -i "s/$version/$new_version/"  "$CURRENT_VERSIONS_FILE/versions"

  

elif [ $1 = "rootfs" ]
then 
  new_version=$(cat $ROOTFS_UPDATE_NAME | cut -d_ -f3)
  version=$(cat "$CURRENT_VERSIONS_FILE/versions" | sed -n 2p | cut -d' ' -f9)
  sed -i "s/$version/$new_version/"  "$CURRENT_VERSIONS_FILE/versions"
fi
}

wait_application_validation () {
  #wait appli validation 
  APP_STATE="WAIT"
  write_version "appli"
  if [ $UPDATE_STATE = "UPDATE_SYSTEM" ]
  then 
    write_version "rootfs"
  fi
  wait_update
  #else 
  if [ $APP_COUNTER -gt 0 ]
  then 
    source "$SCRIPTS_PATH/launch_update.sh" $APPLI_UPDATE_NAME
    APP_COUNTER=$($APP_COUNTER - 1)
  else  
    if [ $UPDATE_STATE = "UPDATE_SYSTEM" ]
    then
      APP_STATE="PREVIOUS_VERSION"
      source "$SCRIPTS_PATH/change_application_part"
      fw_setenv part 'setexpr part ${part} ^ 1'
    fi
  
    if [ $UPDATE_STATE = "UPDATE_APP" ]
    then
      APP_STATE="PREVIOUS_VERSION" 
      source "$SCRIPTS_PATH/change_application_part"
    fi

    "$SCRIPTS_PATH/invalidate_update.sh" $APPLI_UPDATE_NAME
     UPDATE_STATE="WAIT"
    reboot
  fi
}

check_update_state () {
if [ $UPDATE_STATE = "WAIT" ]
then 
  wait_update
fi

if [ $UPDATE_STATE = "UPDATE_SYSTEM" ]
then
  check_value "test_count"
  wait_application_validation
fi
  
if [ $UPDATE_STATE = "UPDATE_APP" ]
then 
  wait_application_validation 
fi
}

check_update_state


